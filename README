= darcs backend for fast data importers
Miklos Vajna <vmiklos-at-frugalware-dot-org>

== Status

Darcs version I tested:

----
$ darcs --version
2.1.0 (release)
----

The supported darcs repo format is the 'old-fashioned' one.

Git version:

----
$ git --version
git version 1.6.0.2
----

Bzr versions:

----
$ bzr version
Bazaar (bzr) 1.7.1
$ ls /usr/lib/python*/site-packages/fastimport*
/usr/lib/python2.5/site-packages/fastimport-0.6.0final0-py2.5.egg-info
----

Hg version:

----
$ hg version
Mercurial Distributed SCM (version 1.0.2)
----

== Goals

=== Converting huge repos

darcs-fast-export (compared to darcs2git or tailor) provides a fast and
simple darcs backend for fast-import.

Thus, the code itself is only about 150 lines, and converting a huge
repo (26094 patches, repo size 210M) took about 10 hours for me.

Compared to darcs2git, it does not try to find conflict resolutions (to
map them to merge commits), to avoid being slow.

Compared to tailor, it is more correct, because the end result being the
exact same of the original repo is guaranteed by darcs itself.

There was an other project named `darcs-fast-export`, but it has been
renamed to http://github.com/freshtonic/undarcs/tree/master[undarcs],
just in case you would confuse the two projects.  It is faster than
`darcs-fast-export` but it will not produce correct result in case your
repo contains conflicts.

=== Independent

Ideally it should work with any fast importer, but actually I tested it
with git fast-import, bzr fast-import and hg fastimport. (AFAIK these
are the tree fast-import implementations available ATM.)

hg fastimport needs two patches, till they are not in upstream, you can
get my repo using

----
$ hg clone static-http://frugalware.org/~vmiklos/hg/hg-fastimport
----

== Usage

Typical usage (given that `test/` is a darcs repo):

----
$ mkdir test.git
$ git --bare init
$ darcs-fast-export.py test |(cd test.git; git fast-import)
----

To verify the results:

----
$ git clone -q test.git test.git.nonbare
$ diff --exclude .git -Naur test.git.nonbare test/_darcs/pristine
$ rm -rf test.git.nonbare
----

If you get no output, then the conversion was successful.

For more examples (especially for bzr and hg ones) see the `t/`
directory.

== Download

Using git:

----
$ git clone git://vmiklos.hu/darcs-fast-export
----

== TODO

- support the darcs2 format
- support incremental conversion
