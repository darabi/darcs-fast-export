#!/bin/sh
#
#   git-darcs - bidirectional operation between a darcs repo and git
#
#   Copyright (c) 2008 by Miklos Vajna <vmiklos@frugalware.org>
#
#   Based on git-bzr, which is
#
#   Copyright (c) 2008 Pieter de Bie <pdebie@ai.rug.nl>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#

add()
{
	name="$1"
	shift
	location="$1"
	shift
	if ! [ -n "$name" -a -n "$location" -a -z "$*" ]; then
		echo "Usage: git darcs add name location"
		exit
	fi
	if git remote show |grep -q $name; then
		echo "There is already a remote with that name"
		exit
	fi
	if [ -n "$(git config git-darcs.$name.url)" ]; then
		echo "There is alread a darcs repo with that name"
		exit
	fi
	if [ ! -d $location/_darcs ]; then
		echo "Remote is not a darcs repository"
		exit
	fi
	git config git-darcs.$name.location $location
	echo "Darcs repo $name added. You can fetch it with 'git darcs fetch $name'"
}

get_location()
{
	l=$(git config git-darcs.$remote.location)
	if [ -z "$l" ]; then
		echo "Cannot find darcs remote with name '$remote'." >&2
		exit
	fi
	echo $l
}

fetch()
{
	remote="$1"
	shift
	if ! [ -n "$remote" -a -z "$*" ]; then
		echo "Usage: git darcs fetch reponame"
		exit
	fi
	location=$(get_location $remote)
	git_map=$git_dir/darcs-git/$remote-git-map
	darcs_map=$git_dir/darcs-git/$remote-darcs-map
	common_opts="--working $git_dir/darcs-git/repo --logfile $git_dir/darcs-git/fetch.log --git-branch=darcs/$remote"
	if [ ! -f $git_map -a ! -f $darcs_map ]; then
		echo "There doesn't seem to be an existing refmap."
		echo "Doing an initial import"
		mkdir -p $git_dir/darcs-git
		darcs-fast-export --export-marks=$darcs_map $common_opts $location | \
			git fast-import --export-marks=$git_map
	elif [ -f $git_map -a -f $darcs_map ]; then
		echo "Updating remote $remote"
		old_rev=$(git rev-parse darcs/$remote)
		darcs-fast-export --import-marks=$darcs_map --export-marks=$darcs_map $common_opts $location | \
			git fast-import --quiet --import-marks=$git_map --export-marks=$git_map
		new_rev=$(git rev-parse darcs/$remote)
		echo "Changes since last update:"
		git shortlog $old_rev..$new_rev
	else
		echo "One of the mapfiles is missing! Something went wrong!"
	fi
}

push()
{
	remote="$1"
	shift
	if ! [ -n "$remote" -a -z "$*" ]; then
		echo "Usage: git darcs push reponame"
		exit
	fi
	location=$(get_location $remote)
	if [ -n "$(git rev-list --left-right HEAD...darcs/$remote | sed -n '/^>/ p')" ]; then
		echo "HEAD is not a strict child of $remote, cannot push. Merge first"
		exit
	fi
	if [ -z "$(git rev-list --left-right HEAD...darcs/$remote | sed -n '/^</ p')" ]; then
		echo "Nothing to push. Commit something first"
		exit
	fi
	git_map=$git_dir/darcs-git/$remote-git-map
	darcs_map=$git_dir/darcs-git/$remote-darcs-map
	if [ ! -f $git_map -o ! -f $darcs_map ]; then
		echo "We do not have refmapping yet. Then how can I push?"
		exit
	fi
	git fast-export --import-marks=$git_map --export-marks=$git_map HEAD | \
		(cd $location; darcs-fast-import --import-marks=$darcs_map --export-marks=$darcs_map \
		--logfile $git_dir/darcs-git/push.log)
}

git rev-parse 2> /dev/null
if [ $? != 0 ]; then
	echo "Must be inside a git repository to work"
	exit
fi

git_dir=$(git rev-parse --git-dir)
# make it absolute
cd $git_dir
git_dir=$(pwd)
cd - >/dev/null
command="$1"
shift

case $command in
	add|push|fetch)
		;;
	*)
		echo "Usage: git darcs [COMMAND] [OPTIONS]"
		echo "Commands: add, push, fetch"
		exit
		;;
esac


up=$(git rev-parse --show-cdup)
[ -z "$up" ] && up="."
cd $up
$command "$@"
